/* $Id$
 * (L)
*/

#include <mnem_test.hxx>
#include <otctlasml/StringView.hxx>
#include <otctlasml/inttypes.hxx>
#include <otctlasml/ConstStringMap.hxx>

namespace otctlasml { namespace mnems {

static ConstStringMap::String mnems_strings[NENTRIES] = {
	{ "ABS", 3 }, // 0: ABS
	{ "ABS.B", 5 }, // 1: ABS_B
	{ "ABS.H", 5 }, // 2: ABS_H
	{ "ABSDIF", 6 }, // 3: ABSDIF
	{ "ABSDIF.B", 8 }, // 4: ABSDIF_B
	{ "ABSDIF.H", 8 }, // 5: ABSDIF_H
	{ "ABSDIFS", 7 }, // 6: ABSDIFS
	{ "ABSDIFS.H", 9 }, // 7: ABSDIFS_H
	{ "ABSS", 4 }, // 8: ABSS
	{ "ABSS.H", 6 }, // 9: ABSS_H
	{ "ADD", 3 }, // 10: ADD
	{ "ADD.A", 5 }, // 11: ADD_A
	{ "ADD.B", 5 }, // 12: ADD_B
	{ "ADD.H", 5 }, // 13: ADD_H
	{ "ADDC", 4 }, // 14: ADDC
	{ "ADDI", 4 }, // 15: ADDI
	{ "ADDIH", 5 }, // 16: ADDIH
	{ "ADDIH.A", 7 }, // 17: ADDIH_A
	{ "ADDS", 4 }, // 18: ADDS
	{ "ADDS.H", 6 }, // 19: ADDS_H
	{ "ADDS.HU", 7 }, // 20: ADDS_HU
	{ "ADDS.U", 6 }, // 21: ADDS_U
	{ "ADDSC.A", 7 }, // 22: ADDSC_A
	{ "ADDSC.AT", 8 }, // 23: ADDSC_AT
	{ "ADDX", 4 }, // 24: ADDX
	{ "AND", 3 }, // 25: AND
	{ "AND.AND.T", 9 }, // 26: AND_AND_T
	{ "AND.ANDN.T", 10 }, // 27: AND_ANDN_T
	{ "AND.EQ", 6 }, // 28: AND_EQ
	{ "AND.GE", 6 }, // 29: AND_GE
	{ "AND.GE.U", 8 }, // 30: AND_GE_U
	{ "AND.LT", 6 }, // 31: AND_LT
	{ "AND.LT.U", 8 }, // 32: AND_LT_U
	{ "AND.NE", 6 }, // 33: AND_NE
	{ "AND.NOR.T", 9 }, // 34: AND_NOR_T
	{ "AND.OR.T", 8 }, // 35: AND_OR_T
	{ "AND.T", 5 }, // 36: AND_T
	{ "ANDN", 4 }, // 37: ANDN
	{ "ANDN.T", 6 }, // 38: ANDN_T
	{ "BISR", 4 }, // 39: BISR
	{ "BMERGE", 6 }, // 40: BMERGE
	{ "BSPLIT", 6 }, // 41: BSPLIT
	{ "CACHEA.I", 8 }, // 42: CACHEA_I
	{ "CACHEA.W", 8 }, // 43: CACHEA_W
	{ "CACHEA.WI", 9 }, // 44: CACHEA_WI
	{ "CACHEI.I", 8 }, // 45: CACHEI_I
	{ "CACHEI.W", 8 }, // 46: CACHEI_W
	{ "CACHEI.WI", 9 }, // 47: CACHEI_WI
	{ "CADD", 4 }, // 48: CADD
	{ "CADDN", 5 }, // 49: CADDN
	{ "CALL", 4 }, // 50: CALL
	{ "CALLA", 5 }, // 51: CALLA
	{ "CALLI", 5 }, // 52: CALLI
	{ "CLO", 3 }, // 53: CLO
	{ "CLO.H", 5 }, // 54: CLO_H
	{ "CLS", 3 }, // 55: CLS
	{ "CLS.H", 5 }, // 56: CLS_H
	{ "CLZ", 3 }, // 57: CLZ
	{ "CLZ.H", 5 }, // 58: CLZ_H
	{ "CMOV", 4 }, // 59: CMOV
	{ "CMOVN", 5 }, // 60: CMOVN
	{ "CMPSWAP.W", 9 }, // 61: CMPSWAP_W
	{ "CRC32", 5 }, // 62: CRC32
	{ "CSUB", 4 }, // 63: CSUB
	{ "CSUBN", 5 }, // 64: CSUBN
	{ "DEBUG", 5 }, // 65: DEBUG
	{ "DEXTR", 5 }, // 66: DEXTR
	{ "DISABLE", 7 }, // 67: DISABLE
	{ "DIV", 3 }, // 68: DIV
	{ "DIV.U", 5 }, // 69: DIV_U
	{ "DSYNC", 5 }, // 70: DSYNC
	{ "DVADJ", 5 }, // 71: DVADJ
	{ "DVINIT", 6 }, // 72: DVINIT
	{ "DVINIT.B", 8 }, // 73: DVINIT_B
	{ "DVINIT.BU", 9 }, // 74: DVINIT_BU
	{ "DVINIT.H", 8 }, // 75: DVINIT_H
	{ "DVINIT.HU", 9 }, // 76: DVINIT_HU
	{ "DVINIT.U", 8 }, // 77: DVINIT_U
	{ "DVSTEP", 6 }, // 78: DVSTEP
	{ "DVSTEP.U", 8 }, // 79: DVSTEP_U
	{ "ENABLE", 6 }, // 80: ENABLE
	{ "EQ", 2 }, // 81: EQ
	{ "EQ.A", 4 }, // 82: EQ_A
	{ "EQ.B", 4 }, // 83: EQ_B
	{ "EQ.H", 4 }, // 84: EQ_H
	{ "EQ.W", 4 }, // 85: EQ_W
	{ "EQANY.B", 7 }, // 86: EQANY_B
	{ "EQANY.H", 7 }, // 87: EQANY_H
	{ "EQZ.A", 5 }, // 88: EQZ_A
	{ "EXTR", 4 }, // 89: EXTR
	{ "EXTR.U", 6 }, // 90: EXTR_U
	{ "FCALL", 5 }, // 91: FCALL
	{ "FCALLA", 6 }, // 92: FCALLA
	{ "FCALLI", 6 }, // 93: FCALLI
	{ "FRET", 4 }, // 94: FRET
	{ "FTOI", 4 }, // 95: FTOI
	{ "FTOIZ", 5 }, // 96: FTOIZ
	{ "FTOQ31", 6 }, // 97: FTOQ31
	{ "FTOQ31Z", 7 }, // 98: FTOQ31Z
	{ "FTOU", 4 }, // 99: FTOU
	{ "FTOUZ", 5 }, // 100: FTOUZ
	{ "F_ADD.F", 7 }, // 101: F_ADD_F
	{ "F_CMP.F", 7 }, // 102: F_CMP_F
	{ "F_DIV.F", 7 }, // 103: F_DIV_F
	{ "F_ITOF", 6 }, // 104: F_ITOF
	{ "F_MADD.F", 8 }, // 105: F_MADD_F
	{ "F_MSUB.F", 8 }, // 106: F_MSUB_F
	{ "F_MUL.F", 7 }, // 107: F_MUL_F
	{ "F_Q31TOF", 8 }, // 108: F_Q31TOF
	{ "F_QSEED.F", 9 }, // 109: F_QSEED_F
	{ "F_SUB.F", 7 }, // 110: F_SUB_F
	{ "F_UPDFL", 7 }, // 111: F_UPDFL
	{ "F_UTOF", 6 }, // 112: F_UTOF
	{ "GE", 2 }, // 113: GE
	{ "GE.A", 4 }, // 114: GE_A
	{ "GE.U", 4 }, // 115: GE_U
	{ "IMASK", 5 }, // 116: IMASK
	{ "INS.T", 5 }, // 117: INS_T
	{ "INSERT", 6 }, // 118: INSERT
	{ "INSN.T", 6 }, // 119: INSN_T
	{ "ISYNC", 5 }, // 120: ISYNC
	{ "IXMAX", 5 }, // 121: IXMAX
	{ "IXMAX.U", 7 }, // 122: IXMAX_U
	{ "IXMIN", 5 }, // 123: IXMIN
	{ "IXMIN.U", 7 }, // 124: IXMIN_U
	{ "J", 1 }, // 125: J
	{ "JA", 2 }, // 126: JA
	{ "JEQ", 3 }, // 127: JEQ
	{ "JEQ.A", 5 }, // 128: JEQ_A
	{ "JGE", 3 }, // 129: JGE
	{ "JGE.U", 5 }, // 130: JGE_U
	{ "JGEZ", 4 }, // 131: JGEZ
	{ "JGTZ", 4 }, // 132: JGTZ
	{ "JI", 2 }, // 133: JI
	{ "JL", 2 }, // 134: JL
	{ "JLA", 3 }, // 135: JLA
	{ "JLEZ", 4 }, // 136: JLEZ
	{ "JLI", 3 }, // 137: JLI
	{ "JLT", 3 }, // 138: JLT
	{ "JLT.U", 5 }, // 139: JLT_U
	{ "JLTZ", 4 }, // 140: JLTZ
	{ "JNE", 3 }, // 141: JNE
	{ "JNE.A", 5 }, // 142: JNE_A
	{ "JNED", 4 }, // 143: JNED
	{ "JNEI", 4 }, // 144: JNEI
	{ "JNZ", 3 }, // 145: JNZ
	{ "JNZ.A", 5 }, // 146: JNZ_A
	{ "JNZ.T", 5 }, // 147: JNZ_T
	{ "JZ", 2 }, // 148: JZ
	{ "JZ.A", 4 }, // 149: JZ_A
	{ "JZ.T", 4 }, // 150: JZ_T
	{ "LD.A", 4 }, // 151: LD_A
	{ "LD.B", 4 }, // 152: LD_B
	{ "LD.BU", 5 }, // 153: LD_BU
	{ "LD.D", 4 }, // 154: LD_D
	{ "LD.DA", 5 }, // 155: LD_DA
	{ "LD.H", 4 }, // 156: LD_H
	{ "LD.HU", 5 }, // 157: LD_HU
	{ "LD.Q", 4 }, // 158: LD_Q
	{ "LD.W", 4 }, // 159: LD_W
	{ "LDLCX", 5 }, // 160: LDLCX
	{ "LDMST", 5 }, // 161: LDMST
	{ "LDUCX", 5 }, // 162: LDUCX
	{ "LEA", 3 }, // 163: LEA
	{ "LOOP", 4 }, // 164: LOOP
	{ "LOOPU", 5 }, // 165: LOOPU
	{ "LT", 2 }, // 166: LT
	{ "LT.A", 4 }, // 167: LT_A
	{ "LT.B", 4 }, // 168: LT_B
	{ "LT.BU", 5 }, // 169: LT_BU
	{ "LT.H", 4 }, // 170: LT_H
	{ "LT.HU", 5 }, // 171: LT_HU
	{ "LT.U", 4 }, // 172: LT_U
	{ "LT.W", 4 }, // 173: LT_W
	{ "LT.WU", 5 }, // 174: LT_WU
	{ "MADD", 4 }, // 175: MADD
	{ "MADD.H", 6 }, // 176: MADD_H
	{ "MADD.Q", 6 }, // 177: MADD_Q
	{ "MADD.U", 6 }, // 178: MADD_U
	{ "MADDM.H", 7 }, // 179: MADDM_H
	{ "MADDMS.H", 8 }, // 180: MADDMS_H
	{ "MADDR.H", 7 }, // 181: MADDR_H
	{ "MADDR.Q", 7 }, // 182: MADDR_Q
	{ "MADDRS.H", 8 }, // 183: MADDRS_H
	{ "MADDRS.Q", 8 }, // 184: MADDRS_Q
	{ "MADDS", 5 }, // 185: MADDS
	{ "MADDS.H", 7 }, // 186: MADDS_H
	{ "MADDS.Q", 7 }, // 187: MADDS_Q
	{ "MADDS.U", 7 }, // 188: MADDS_U
	{ "MADDSU.H", 8 }, // 189: MADDSU_H
	{ "MADDSUM.H", 9 }, // 190: MADDSUM_H
	{ "MADDSUMS.H", 10 }, // 191: MADDSUMS_H
	{ "MADDSUR.H", 9 }, // 192: MADDSUR_H
	{ "MADDSURS.H", 10 }, // 193: MADDSURS_H
	{ "MADDSUS.H", 9 }, // 194: MADDSUS_H
	{ "MAX", 3 }, // 195: MAX
	{ "MAX.B", 5 }, // 196: MAX_B
	{ "MAX.BU", 6 }, // 197: MAX_BU
	{ "MAX.H", 5 }, // 198: MAX_H
	{ "MAX.HU", 6 }, // 199: MAX_HU
	{ "MAX.U", 5 }, // 200: MAX_U
	{ "MFCR", 4 }, // 201: MFCR
	{ "MIN", 3 }, // 202: MIN
	{ "MIN.B", 5 }, // 203: MIN_B
	{ "MIN.BU", 6 }, // 204: MIN_BU
	{ "MIN.H", 5 }, // 205: MIN_H
	{ "MIN.HU", 6 }, // 206: MIN_HU
	{ "MIN.U", 5 }, // 207: MIN_U
	{ "MOV", 3 }, // 208: MOV
	{ "MOV.A", 5 }, // 209: MOV_A
	{ "MOV.AA", 6 }, // 210: MOV_AA
	{ "MOV.D", 5 }, // 211: MOV_D
	{ "MOV.U", 5 }, // 212: MOV_U
	{ "MOVH", 4 }, // 213: MOVH
	{ "MOVH.A", 6 }, // 214: MOVH_A
	{ "MSUB", 4 }, // 215: MSUB
	{ "MSUB.H", 6 }, // 216: MSUB_H
	{ "MSUB.Q", 6 }, // 217: MSUB_Q
	{ "MSUB.U", 6 }, // 218: MSUB_U
	{ "MSUBAD.H", 8 }, // 219: MSUBAD_H
	{ "MSUBADM.H", 9 }, // 220: MSUBADM_H
	{ "MSUBADMS.H", 10 }, // 221: MSUBADMS_H
	{ "MSUBADR.H", 9 }, // 222: MSUBADR_H
	{ "MSUBADRS.H", 10 }, // 223: MSUBADRS_H
	{ "MSUBADS.H", 9 }, // 224: MSUBADS_H
	{ "MSUBM.H", 7 }, // 225: MSUBM_H
	{ "MSUBMS.H", 8 }, // 226: MSUBMS_H
	{ "MSUBR.H", 7 }, // 227: MSUBR_H
	{ "MSUBR.Q", 7 }, // 228: MSUBR_Q
	{ "MSUBRS.H", 8 }, // 229: MSUBRS_H
	{ "MSUBRS.Q", 8 }, // 230: MSUBRS_Q
	{ "MSUBS", 5 }, // 231: MSUBS
	{ "MSUBS.H", 7 }, // 232: MSUBS_H
	{ "MSUBS.Q", 7 }, // 233: MSUBS_Q
	{ "MSUBS.U", 7 }, // 234: MSUBS_U
	{ "MTCR", 4 }, // 235: MTCR
	{ "MUL", 3 }, // 236: MUL
	{ "MUL.H", 5 }, // 237: MUL_H
	{ "MUL.Q", 5 }, // 238: MUL_Q
	{ "MUL.U", 5 }, // 239: MUL_U
	{ "MULM.H", 6 }, // 240: MULM_H
	{ "MULMS.H", 7 }, // 241: MULMS_H
	{ "MULR.H", 6 }, // 242: MULR_H
	{ "MULR.Q", 6 }, // 243: MULR_Q
	{ "MULS", 4 }, // 244: MULS
	{ "MULS.U", 6 }, // 245: MULS_U
	{ "NAND", 4 }, // 246: NAND
	{ "NAND.T", 6 }, // 247: NAND_T
	{ "NE", 2 }, // 248: NE
	{ "NE.A", 4 }, // 249: NE_A
	{ "NEZ.A", 5 }, // 250: NEZ_A
	{ "NOP", 3 }, // 251: NOP
	{ "NOR", 3 }, // 252: NOR
	{ "NOR.T", 5 }, // 253: NOR_T
	{ "NOT", 3 }, // 254: NOT
	{ "OR", 2 }, // 255: OR
	{ "OR.AND.T", 8 }, // 256: OR_AND_T
	{ "OR.ANDN.T", 9 }, // 257: OR_ANDN_T
	{ "OR.EQ", 5 }, // 258: OR_EQ
	{ "OR.GE", 5 }, // 259: OR_GE
	{ "OR.GE.U", 7 }, // 260: OR_GE_U
	{ "OR.LT", 5 }, // 261: OR_LT
	{ "OR.LT.U", 7 }, // 262: OR_LT_U
	{ "OR.NE", 5 }, // 263: OR_NE
	{ "OR.NOR.T", 8 }, // 264: OR_NOR_T
	{ "OR.OR.T", 7 }, // 265: OR_OR_T
	{ "OR.T", 4 }, // 266: OR_T
	{ "ORN", 3 }, // 267: ORN
	{ "ORN.T", 5 }, // 268: ORN_T
	{ "PACK", 4 }, // 269: PACK
	{ "PARITY", 6 }, // 270: PARITY
	{ "RESTORE", 7 }, // 271: RESTORE
	{ "RET", 3 }, // 272: RET
	{ "RFE", 3 }, // 273: RFE
	{ "RFM", 3 }, // 274: RFM
	{ "RSLCX", 5 }, // 275: RSLCX
	{ "RSTV", 4 }, // 276: RSTV
	{ "RSUB", 4 }, // 277: RSUB
	{ "RSUBS", 5 }, // 278: RSUBS
	{ "RSUBS.U", 7 }, // 279: RSUBS_U
	{ "SAT.B", 5 }, // 280: SAT_B
	{ "SAT.BU", 6 }, // 281: SAT_BU
	{ "SAT.H", 5 }, // 282: SAT_H
	{ "SAT.HU", 6 }, // 283: SAT_HU
	{ "SEL", 3 }, // 284: SEL
	{ "SELN", 4 }, // 285: SELN
	{ "SH", 2 }, // 286: SH
	{ "SH.AND.T", 8 }, // 287: SH_AND_T
	{ "SH.ANDN.T", 9 }, // 288: SH_ANDN_T
	{ "SH.EQ", 5 }, // 289: SH_EQ
	{ "SH.GE", 5 }, // 290: SH_GE
	{ "SH.GE.U", 7 }, // 291: SH_GE_U
	{ "SH.H", 4 }, // 292: SH_H
	{ "SH.LT", 5 }, // 293: SH_LT
	{ "SH.LT.U", 7 }, // 294: SH_LT_U
	{ "SH.NAND.T", 9 }, // 295: SH_NAND_T
	{ "SH.NE", 5 }, // 296: SH_NE
	{ "SH.NOR.T", 8 }, // 297: SH_NOR_T
	{ "SH.OR.T", 7 }, // 298: SH_OR_T
	{ "SH.ORN.T", 8 }, // 299: SH_ORN_T
	{ "SH.XNOR.T", 9 }, // 300: SH_XNOR_T
	{ "SH.XOR.T", 8 }, // 301: SH_XOR_T
	{ "SHA", 3 }, // 302: SHA
	{ "SHA.H", 5 }, // 303: SHA_H
	{ "SHAS", 4 }, // 304: SHAS
	{ "ST.A", 4 }, // 305: ST_A
	{ "ST.B", 4 }, // 306: ST_B
	{ "ST.D", 4 }, // 307: ST_D
	{ "ST.DA", 5 }, // 308: ST_DA
	{ "ST.H", 4 }, // 309: ST_H
	{ "ST.Q", 4 }, // 310: ST_Q
	{ "ST.T", 4 }, // 311: ST_T
	{ "ST.W", 4 }, // 312: ST_W
	{ "STLCX", 5 }, // 313: STLCX
	{ "STUCX", 5 }, // 314: STUCX
	{ "SUB", 3 }, // 315: SUB
	{ "SUB.A", 5 }, // 316: SUB_A
	{ "SUB.B", 5 }, // 317: SUB_B
	{ "SUB.H", 5 }, // 318: SUB_H
	{ "SUBC", 4 }, // 319: SUBC
	{ "SUBS", 4 }, // 320: SUBS
	{ "SUBS.H", 6 }, // 321: SUBS_H
	{ "SUBS.HU", 7 }, // 322: SUBS_HU
	{ "SUBS.U", 6 }, // 323: SUBS_U
	{ "SUBX", 4 }, // 324: SUBX
	{ "SVLCX", 5 }, // 325: SVLCX
	{ "SWAP.W", 6 }, // 326: SWAP_W
	{ "SWAPMSK.W", 9 }, // 327: SWAPMSK_W
	{ "SYSCALL", 7 }, // 328: SYSCALL
	{ "TRAPSV", 6 }, // 329: TRAPSV
	{ "TRAPV", 5 }, // 330: TRAPV
	{ "UNPACK", 6 }, // 331: UNPACK
	{ "WAIT", 4 }, // 332: WAIT
	{ "XNOR", 4 }, // 333: XNOR
	{ "XNOR.T", 6 }, // 334: XNOR_T
	{ "XOR", 3 }, // 335: XOR
	{ "XOR.EQ", 6 }, // 336: XOR_EQ
	{ "XOR.GE", 6 }, // 337: XOR_GE
	{ "XOR.GE.U", 8 }, // 338: XOR_GE_U
	{ "XOR.LT", 6 }, // 339: XOR_LT
	{ "XOR.LT.U", 8 }, // 340: XOR_LT_U
	{ "XOR.NE", 6 }, // 341: XOR_NE
	{ "XOR.T", 5 }, // 342: XOR_T
	{ "~[invalid~entry~mnems]~", 23 }
}; /* strings */

mnems_e mnemsFromString(StringView s) {
	return (mnems_e) ConstStringMap::fromString(s, mnems_strings, (uintn_t) NENTRIES);
}
extern StringView mnemsToString(uintn_t val) {
	return ConstStringMap::toString(val, mnems_strings, (uintn_t) NENTRIES);
}

} } /* namespaces */

