
==== Linker input format ====


Example:

options {
	allow_lto off
	lto_peephole_fnaddr off     // Replace far calls to function addresses by relative or absolute calls if possible (default: off)
	lto_peephole_absaddr off    // Replace loading the address of an object by accesses to the absolute address if possible (default: off)
	lto_peephole_sda off        // Replace loading the address of an object by accesses relative to A0 or A1 if possible (default: off)
	out stdout
	//out file "output.elf"
	//out shmem "output.elf"
}

filesets - {
	fileset fs1 {
		lasm file "demo*.o*"w
		lasm file "demo.*\.o.*"r
		lasm file "demo.o"
		lasm shmemdel "demo.s"
		lasm shmemkeep "demo2.s"
	}
}
sectionsets - {
	sectionset bssc0 {
		".zbss.core0*"w
		".zbss.shared.core0*"w
		".bss.core0*"w
		".bss.shared.core0*"w
	}
}

memory - {
	flash 0x80000000 +.. 0x4000 {
		reserve - {
			0x80000100 +.. 0x100
		}
	}
	ram0 0xd0000000 ../ 0xd0001000
}

alloc {
	switchto ram0
	gotor 0
	switchto flash
	gotor 0
	alignv 32
	group {
		scatter on // flow around reserved
		: TEXT_BEGIN
		select image ".text.reset*"w from fs1
		select image ".text*"w from fs1
		: TEXT_END
		: RODATA_BEGIN
		select image ".rodata*"w from fs1
		: RODATA_END
	}
	alignv 32
	group {
		// by default 'scatter' is off, so if this group hits a reserved area, it is placed after the reserved area.
		: DATA_INIT_BEGIN
		select image ".data*"w from fs1
		: DATA_INIT_END
	}
	switchto ram0
	alignv 32
	group {
		: DATA_BEGIN
		select ram ".data*"w from fs1
		: DATA_END
		: BSS_BEGIN
		select ram ".bss*"w from fs1
		: BSS_END
	}
	goto 0xd0000100
	group {
		select ".whatever*"w from fs1
	}
}

