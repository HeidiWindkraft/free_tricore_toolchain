
otclasm input format:

In general symbols and sections can't contain whitespace.
otclasm assumes that all comments (maybe except // comments) were already removed by the C preprocessor.
otclasm must be able to deal with "# file line" directives.
-- (Not sure about this) The following special characters don't seem to be allowed in symbols: \ / ^


==== Header:
	- Global symbols (which are used across different sections)
	- External symbols
	- Internal symbols (which are used across different sections)

	=== Syntax
	
		global <number of global symbols n> {
			<section 0><symbol 0>
			<section 1><symbol 1>
			...
			<section n-1><symbol n-1>
		}


		extern <number of external symbols n> {
			<symbol 0>
			<symbol 1>
			...
			<symbol n-1>
		}

		intern <number of internal symbols n> {
			<symbol 0>
			<symbol 1>
			...
			<symbol n-1>
		}

		// Number of symbols
		The number of symbols given after global/extern/intern should be the actual number of symbols listed until '}'.
		The number may be '-' which means "don't care". Implementation may or may not support this.

		// symbol description
		
			<identifier> <address>
		
			<address>:
				&-						// unresolved address
				&a	<absolute address>	// absolute address
				&r <relative address>	// address relative to start of section in this file

				Examples:
					main &-					// unresolved address
					main &a	0x80000100		// absolute address
					main &r 256				// address relative to start of section in this file


	=== Example

		global 1 {
			.text main &-
		}

		extern 2 {
			readLine &-
			parseInt &-
		}

		intern 5 {
			mainLoopBegin &-
			mainLoopEnd &-
			fail &-
			ok &-
			next &-
		}


==== Sections (code)
	Multiple sections constaining instructions or raw data.

	A section is introduced using the "section" keyword followed by the section name.

	Each section may declare global, extern and intern symbols.
	These declaration follow the similar rules as those in the file header.
	However, the declaration of global symbols doesn't contain a section name here.

	It is recommended to have one section per function and variable to allow fine grained linking.
	
	
	=== Syntax
	
		section <section name>
			global <number of global symbols> {
				<symbol 0>
				<...>
				<symbol n>
			}
			extern <number of extern symbols> {
				<symbol 0>
				<...>
				<symbol n>
			}
			intern <number of internal symbols> {
				<symbol 0>
				<...>
				<symbol n>
			}
		{
			<intruction 0>
			...
			<instruction n>
		}

	=== Example

		section .text
		{
			aligne 2
			label main
				srr mov.aa  6 10	// r6 = r10
				sc  sub.a  32		// r10 = r10 - 32
				<...>
				ret
		}
		section .rodata
		{
			raw32 0x11223344
			sys nop
			sr nop
			raw16 0x5566
			raw32 lab main
			raw16 hiu main
			raw16 lou main
		}

	=== Pseudo intructions:
		aligne x: align next item to 2**x
		alignv x: align next item to x
		raw8   x
		raw16  x
		raw32  x
		raw64  x: Add integer or label x as raw data
		label  x: Define a label called x
		}       : Ends the section
		rawbites n <bytes>: Add raw bytes.

	=== Accessing labels:
		lab    x  : The absolute value of label x
		off    x  : The distance from the current position to label x
		dist   x y: The distance between label x and y
		his    x  : The high sign-adjusted half of label x: ((his x) << 16) + (los x) == label x
		los    x  : The low sign-adjusted half of label x (see his).
		hiu    x  : The high half of label x: ((hiu x) << 16) | (lou x)
		lou    x  : The low half of label x (see hiu).

==== Full example

global 2 {
	.text.util readNextIntOrExit &- -
	.text.util _readNextIntOrExit_end &- -
}

extern 3 {
	eof &- -
	readNextInt &- -
	exit &- -
}

intern 1 {
	reachedEof &- -
}

section .text.util
{
	alignv 4
	label readNextIntOrExit
		b   call off eof
		sbr jz   off reachedEof 2	// if (d2 == 0) goto reachedEof
		b   j    off readNextInt	// tail call
	label reachedEof
		b   j    off exit
	label _readNextIntOrExit_end
}


